# SSD with Mobilenet v2 configuration for MSCOCO Dataset.
#  Updated to 512x512 input size
#  Use cosine decay LR from fpn configs
#  Use weighted sigmoid focal loss function from fpn configs
# Users should configure the fine_tune_checkpoint field in the train config as
# well as the label_map_path and input_path fields in the train_input_reader and
# eval_input_reader. Search for "PATH_TO_BE_CONFIGURED" to find the fields that
# should be configured.

model {
  ssd {
    num_classes: 37
    box_coder {
      faster_rcnn_box_coder {
        y_scale: 10.0
        x_scale: 10.0
        height_scale: 5.0
        width_scale: 5.0
      }
    }
    matcher {
      argmax_matcher {
        matched_threshold: 0.5
        unmatched_threshold: 0.5
        ignore_thresholds: false
        negatives_lower_than_unmatched: true
        force_match_for_each_row: true
      }
    }
    similarity_calculator {
      iou_similarity {
      }
    }
    anchor_generator {
      ssd_anchor_generator {
        num_layers: 6
        min_scale: 0.2
        max_scale: 0.95
        aspect_ratios: 1.0
        aspect_ratios: 2.0
        aspect_ratios: 0.5
        aspect_ratios: 3.0
        aspect_ratios: 0.3333
      }
    }
    image_resizer {
      fixed_shape_resizer {
        height: 512
        width: 512
      }
    }
    box_predictor {
      convolutional_box_predictor {
        min_depth: 0
        max_depth: 0
        num_layers_before_predictor: 0
        use_dropout: false
        dropout_keep_probability: 0.8
        kernel_size: 1
        box_code_size: 4
        apply_sigmoid_to_scores: false
        conv_hyperparams {
          activation: RELU_6,
          regularizer {
            l2_regularizer {
              weight: 0.00004
            }
          }
          initializer {
            truncated_normal_initializer {
              stddev: 0.03
              mean: 0.0
            }
          }
          batch_norm {
            train: true,
            scale: true,
            center: true,
            decay: 0.9997,
            epsilon: 0.001,
          }
        }
      }
    }
    feature_extractor {
      type: 'ssd_mobilenet_v2'
      min_depth: 16
      depth_multiplier: 1.0
      conv_hyperparams {
        activation: RELU_6,
        regularizer {
          l2_regularizer {
            weight: 0.00004
          }
        }
        initializer {
          truncated_normal_initializer {
            stddev: 0.03
            mean: 0.0
          }
        }
        batch_norm {
          train: true,
          scale: true,
          center: true,
          decay: 0.9997,
          epsilon: 0.001,
        }
      }
    }
    loss {
      classification_loss {
        weighted_sigmoid_focal {
          alpha: 0.25
          gamma: 2.0
        }
      }
      localization_loss {
        weighted_smooth_l1 {
        }
      }
      classification_weight: 1.0
      localization_weight: 1.0
    }
    normalize_loss_by_num_matches: true
    post_processing {
      batch_non_max_suppression {
        score_threshold: 0.175
        iou_threshold: 0.3
        max_detections_per_class: 100
        max_total_detections: 100
      }
      score_converter: SIGMOID
    }
  }
}

train_config: {
  batch_size: 12
  batch_queue_capacity: 10
  num_batch_queue_threads: 8
  prefetch_queue_capacity: 10
  optimizer {
    rms_prop_optimizer: {
      learning_rate: {
        cosine_decay_learning_rate {
          learning_rate_base: .10
          total_steps: 225000
          warmup_learning_rate: .026666
          warmup_steps: 2000
        }
      }
      momentum_optimizer_value: 0.9
      decay: 0.9
      epsilon: 1.0
    }
  }
  #optimizer {
    #momentum_optimizer: {
      #learning_rate: {
        #cosine_decay_learning_rate {
          #learning_rate_base: .1
          #total_steps: 175000
          #warmup_learning_rate: .026666
          #warmup_steps: 2000
        #}
      #}
      #momentum_optimizer_value: 0.9
    #}
    #use_moving_average: false
  #}

  fine_tune_checkpoint: "/home/ubuntu/tensorflow_workspace/2020Game/models/ssd_mobilenet_v2_coco_2018_03_29/model.ckpt"
  fine_tune_checkpoint_type:  "detection"
  # Note: The below line limits the training process to 200K steps, which we
  # empirically found to be sufficient enough to train the pets dataset. This
  # effectively bypasses the learning rate schedule (the learning rate will
  # never decay). Remove the below line to train indefinitely.
  #num_steps: 200000
  data_augmentation_options {
    random_horizontal_flip {
    }
  }
  data_augmentation_options {
    ssd_random_crop {
    }
  }
}

train_input_reader: {
  tf_record_input_reader {
    input_path: "/home/ubuntu/tensorflow_workspace/2020Game/data/2020Game_train.record-?????-of-00010"
  }
  label_map_path: "/home/ubuntu/tensorflow_workspace/2020Game/data/2020Game_label_map.pbtxt"
  num_readers: 4
  queue_capacity: 1000
  min_after_dequeue: 100
  shuffle_buffer_size: 256
}

eval_config: {
  max_evals: 1
  num_visualizations: 50
  min_score_threshold: 0.25
  max_num_boxes_to_visualize: 50
  eval_interval_secs: 99999999 # Only trigger eval on checkpoint save vs. timeout
}

eval_input_reader: {
  tf_record_input_reader {
    input_path: "/home/ubuntu/tensorflow_workspace/2020Game/data/2020Game_val.record-?????-of-00010"
  }
  label_map_path: "/home/ubuntu/tensorflow_workspace/2020Game/data/2020Game_label_map.pbtxt"
  shuffle: true
  num_readers: 4
  queue_capacity: 1000
  min_after_dequeue: 100
  shuffle_buffer_size: 512
}
